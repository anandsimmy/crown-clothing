{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport { auth, googleProvider, getCurrentUser, createUserProfileInDB } from '../../firebase/firebase-utils';\nimport userActionTypes from './user-action-types';\nimport { signInSuccess, signInFailure } from './user-actions';\nexport function* snapShotFromDB(userAuth) {\n  try {\n    const userRef = yield createUserProfileInDB(userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* checkUserSession() {\n  try {\n    const userAuth = yield getCurrentUser();\n    yield call(snapShotFromDB(userAuth));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield snapShotFromDB(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield snapShotFromDB(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, checkUserSession);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/anandsimmy/react-projects/crown-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","call","all","auth","googleProvider","getCurrentUser","createUserProfileInDB","userActionTypes","signInSuccess","signInFailure","snapShotFromDB","userAuth","userRef","userSnapshot","get","id","data","error","checkUserSession","googleSignIn","user","signInWithPopup","emailSignIn","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,cAA/B,EAA+CC,qBAA/C,QAA4E,+BAA5E;AAEA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,cAAV,CAAyBC,QAAzB,EAAkC;AACrC,MAAG;AACC,UAAMC,OAAO,GAAE,MAAMN,qBAAqB,CAACK,QAAD,CAA1C;AACA,UAAME,YAAY,GAAE,MAAMD,OAAO,CAACE,GAAR,EAA1B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AACpBO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAPD,CAOC,OAAMC,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAMP,QAAQ,GAAE,MAAMN,cAAc,EAApC;AACA,UAAMJ,IAAI,CAACS,cAAc,CAACC,QAAD,CAAf,CAAV;AACH,GAHD,CAGC,OAAMM,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUE,YAAV,GAAwB;AAC3B,MAAG;AACC,UAAM;AAAEC,MAAAA;AAAF,QAAU,MAAMjB,IAAI,CAACkB,eAAL,CAAqBjB,cAArB,CAAtB;AACA,UAAMM,cAAc,CAACU,IAAD,CAApB;AACH,GAHD,CAIA,OAAMH,KAAN,EAAY;AACR,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUK,WAAV,CAAsB;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAAtB,EAAmD;AACtD,MAAG;AACC,UAAM;AAAEL,MAAAA;AAAF,QAAU,MAAMjB,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAtB;AACA,UAAMf,cAAc,CAACU,IAAD,CAApB;AACH,GAHD,CAGC,OAAMH,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAM5B,UAAU,CAACQ,eAAe,CAACqB,kBAAjB,EAAqCV,gBAArC,CAAhB;AACH;AAED,OAAO,UAAUW,mBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAACQ,eAAe,CAACuB,oBAAjB,EAAuCX,YAAvC,CAAhB;AACH;AAED,OAAO,UAAUY,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACQ,eAAe,CAACyB,mBAAjB,EAAsCV,WAAtC,CAAhB;AACH;AAED,OAAO,UAAUW,SAAV,GAAqB;AACxB,QAAM/B,GAAG,CAAC,CAACD,IAAI,CAAC4B,mBAAD,CAAL,EAA4B5B,IAAI,CAAC8B,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects'\n\nimport { auth, googleProvider, getCurrentUser, createUserProfileInDB } from '../../firebase/firebase-utils'\n\nimport userActionTypes from './user-action-types'\nimport { signInSuccess, signInFailure } from './user-actions'\n\nexport function* snapShotFromDB(userAuth){\n    try{\n        const userRef= yield createUserProfileInDB(userAuth)\n        const userSnapshot= yield userRef.get()\n        yield put(signInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data()\n        }))\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* checkUserSession(){\n    try{\n        const userAuth= yield getCurrentUser()\n        yield call(snapShotFromDB(userAuth))\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* googleSignIn(){\n    try{\n        const { user }= yield auth.signInWithPopup(googleProvider)\n        yield snapShotFromDB(user)\n    }\n    catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* emailSignIn({payload: {email, password}}){\n    try{\n        const { user }= yield auth.signInWithEmailAndPassword(email, password)\n        yield snapShotFromDB(user)\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, checkUserSession)\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, googleSignIn)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, emailSignIn)\n}\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart)])\n}\n\n"]},"metadata":{},"sourceType":"module"}