{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport { auth, googleProvider, getCurrentUser, createUserProfileInDB } from '../../firebase/firebase-utils';\nimport userActionTypes from './user-action-types';\nimport { signInSuccess, signInFailure, signUpSuccess, signUpFailure, signOutSuccess, signOutFailure } from './user-actions';\nexport function* snapShotFromDB(userAuth) {\n  try {\n    const userRef = yield createUserProfileInDB(userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAlreadySignedIn() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield snapShotFromDB(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield snapShotFromDB(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield snapShotFromDB(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  displayName,\n  email,\n  password\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield snapShotFromDB(user, dispatchName);\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n} //listeners\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAlreadySignedIn);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/anandsimmy/react-projects/crown-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","call","all","auth","googleProvider","getCurrentUser","createUserProfileInDB","userActionTypes","signInSuccess","signInFailure","signUpSuccess","signUpFailure","signOutSuccess","signOutFailure","snapShotFromDB","userAuth","userRef","userSnapshot","get","id","data","error","isUserAlreadySignedIn","googleSignIn","user","signInWithPopup","emailSignIn","payload","email","password","signInWithEmailAndPassword","signOut","signUp","displayName","createUserWithEmailAndPassword","dispatchName","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects'\n\nimport { auth, googleProvider, getCurrentUser, createUserProfileInDB } from '../../firebase/firebase-utils'\n\nimport userActionTypes from './user-action-types'\nimport { signInSuccess,\n         signInFailure,\n         signUpSuccess,\n         signUpFailure,\n         signOutSuccess,\n         signOutFailure } from './user-actions'\n\nexport function* snapShotFromDB(userAuth){\n    try{\n        const userRef= yield createUserProfileInDB(userAuth, )\n        const userSnapshot= yield userRef.get()\n        yield put(signInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data()\n        }))\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* isUserAlreadySignedIn(){\n    try{\n        const userAuth= yield getCurrentUser()\n        if(!userAuth)\n            return\n        yield snapShotFromDB(userAuth)\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* googleSignIn(){\n    try{\n        const { user }= yield auth.signInWithPopup(googleProvider)\n        yield snapShotFromDB(user)\n    }\n    catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* emailSignIn({payload: {email, password}}){\n    try{\n        const { user }= yield auth.signInWithEmailAndPassword(email, password)\n        yield snapShotFromDB(user)\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signOut(){\n    try{\n        yield auth.signOut()\n        yield put(signOutSuccess())\n    }catch(error){\n        yield put(signOutFailure(error))\n    }\n}\n\nexport function* signUp({ displayName, email, password }){\n    try{\n        const { user }= yield auth.createUserWithEmailAndPassword(email, password)\n        yield snapShotFromDB(user, dispatchName)\n    }catch(error){\n        yield put(signUpFailure(error))\n    }\n}\n\n//listeners\nexport function* onCheckUserSession(){\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAlreadySignedIn)\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, googleSignIn)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, emailSignIn)\n}\n\nexport function* onSignOutStart(){\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* onSignUpStart(){\n    yield takeLatest(userActionTypes.SIGN_UP_START, signUp)\n}\n\nexport function* userSagas(){\n    yield all([\n        call(onGoogleSignInStart), \n        call(onEmailSignInStart), \n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUpStart)\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}