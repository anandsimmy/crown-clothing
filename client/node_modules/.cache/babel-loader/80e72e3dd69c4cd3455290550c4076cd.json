{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport firebaseConfig from './firebase-config';\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore().enablePersistence();\nexport const createUserProfileInDB = async (userAuthObj, additionalData) => {\n  if (!userAuthObj) return;\n  const userDocRef = firestore.doc(`users/${userAuthObj.uid}`);\n  const snapShot = await userDocRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuthObj;\n    const createdAt = new Date();\n\n    try {\n      userDocRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const addCollectionsAndDocumentsInDB = async (collectionsKey, ObjectsToAdd) => {\n  const collectionsRef = firestore.collection(collectionsKey); //we are using batch, to make sure all objs has been written to DB successfully\n\n  const batch = firestore.batch();\n  ObjectsToAdd.forEach(obj => {\n    const newDocRef = collectionsRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const transformCollectionArray = snapShotObj => {\n  //adding two extra properties, id and routeName\n  const transformedArray = snapShotObj.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    };\n  }); //converting array to an object\n\n  return transformedArray.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/anandsimmy/react-projects/crown-clothing/src/firebase/firebase-utils.js"],"names":["firebase","firebaseConfig","initializeApp","firestore","enablePersistence","createUserProfileInDB","userAuthObj","additionalData","userDocRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionsAndDocumentsInDB","collectionsKey","ObjectsToAdd","collectionsRef","collection","batch","forEach","obj","newDocRef","commit","transformCollectionArray","snapShotObj","transformedArray","docs","map","title","items","data","id","routeName","encodeURI","toLowerCase","reduce","acc","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nimport firebaseConfig from './firebase-config'\n\nfirebase.initializeApp(firebaseConfig)\n\nfirebase.firestore().enablePersistence()\n\nexport const createUserProfileInDB=async (userAuthObj, additionalData) => {\n    \n    if(!userAuthObj)\n        return;\n    const userDocRef= firestore.doc(`users/${userAuthObj.uid}`)\n    const snapShot= await userDocRef.get()\n    if(!snapShot.exists){\n        const { displayName, email }= userAuthObj\n        const createdAt= new Date()\n        try{\n            userDocRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        }\n        catch (error) {\n            console.log('error creating user', error.message)\n        }\n    }\n    return userDocRef\n}\n\nexport const addCollectionsAndDocumentsInDB= async (collectionsKey, ObjectsToAdd) => {\n    const collectionsRef= firestore.collection(collectionsKey)\n    //we are using batch, to make sure all objs has been written to DB successfully\n    const batch= firestore.batch()\n    ObjectsToAdd.forEach(obj => {\n        const newDocRef= collectionsRef.doc()\n        batch.set(newDocRef, obj)\n    })\n    return await batch.commit()\n}\n\nexport const transformCollectionArray=(snapShotObj)=>{\n    //adding two extra properties, id and routeName\n    const transformedArray= snapShotObj.docs.map(doc => {\n        const { title, items }= doc.data()\n        return {\n            id: doc.id,\n            routeName: encodeURI(title.toLowerCase()),\n            title,\n            items\n        }\n    })\n    //converting array to an object\n    return transformedArray.reduce((acc, collection) => {\n        acc[collection.title.toLowerCase()]= collection\n        return acc\n    }, {})\n}\n\nexport const auth= firebase.auth()\nexport const firestore= firebase.firestore()\n\nconst googleProvider= new firebase.auth.GoogleAuthProvider()\ngoogleProvider.setCustomParameters({ prompt: 'select_account' })\nexport const signInWithGoogle= () => auth.signInWithPopup(googleProvider)\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}